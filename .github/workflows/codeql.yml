name: "CodeQL Security Analysis"

on:
  push:
    branches: [ "main", "develop" ]
    paths-ignore:
      - 'vendor/**'
      - 'node_modules/**'
      - '*.gemspec'
      - 'Gemfile.lock'
      - 'package-lock.json'
      - 'yarn.lock'
      - '.bundle/**'
      - 'coverage/**'
      - 'logs/**'
      - 'tmp/**'
      - 'public/assets/**'
      - 'public/javascripts/vendor/**'
      - 'public/stylesheets/vendor/**'
  pull_request:
    branches: [ "main", "develop" ]
    paths-ignore:
      - 'vendor/**'
      - 'node_modules/**'
      - '*.gemspec'
      - 'Gemfile.lock'
      - 'package-lock.json'
      - 'yarn.lock'
      - '.bundle/**'
      - 'coverage/**'
      - 'logs/**'
      - 'tmp/**'
      - 'public/assets/**'
      - 'public/javascripts/vendor/**'
      - 'public/stylesheets/vendor/**'
  schedule:
    - cron: '0 6 * * 1'
  workflow_dispatch:

env:
  RUBY_VERSION: 3.4.7

jobs:
  analyze:
    name: CodeQL Analysis (${{ matrix.language }})
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        language: [ 'ruby', 'javascript' ]

    permissions:
      actions: read
      contents: read
      security-events: write
      packages: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Ruby
      if: matrix.language == 'ruby'
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install Ruby system dependencies
      if: matrix.language == 'ruby'
      run: |
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev libpq-dev libsqlite3-dev
        echo "DATABASE_ADAPTER=sqlite" >> $GITHUB_ENV
        echo "DATABASE_NAME=codeql_analysis.db" >> $GITHUB_ENV
        echo "APP_ENV=test" >> $GITHUB_ENV
        echo "APP_SECRET=codeql_test_secret_key" >> $GITHUB_ENV
        echo "JWT_SECRET=codeql_test_jwt_secret" >> $GITHUB_ENV
        bundle install

    - name: Set up Node.js
      if: matrix.language == 'javascript'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-extended
        config-file: ./.github/codeql/codeql-config.yml

    - name: Setup test DB for Ruby analysis
      if: matrix.language == 'ruby'
      run: |
        bundle exec ruby -e "
          require './lib/database'
          begin
            SourceLicense::Database.setup
            puts 'Database setup complete'
          rescue => e
            puts 'Database setup failed: #{e.message}'
          end
        " || echo "Continuing without database setup"

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{ matrix.language }}"

  security-review:
    name: Security Review
    runs-on: ubuntu-latest
    needs: analyze
    if: always()

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install Security Tools
      run: gem install bundler-audit rubocop

    - name: Run Bundler Audit
      run: |
        bundle audit --update

    - name: Run RuboCop Static Analysis
      run: |
        rubocop --format json --out rubocop-results.json || true

    - name: Upload RuboCop Results
      uses: actions/upload-artifact@v4
      with:
        name: rubocop-analysis-results
        path: rubocop-results.json
        retention-days: 30

    - name: Write Security Summary
      run: |
        echo "## üîí Security Review Summary" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ Bundler Audit Complete" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ RuboCop Static Analysis Complete" >> $GITHUB_STEP_SUMMARY
        echo "- ‚úÖ CodeQL Analysis Complete" >> $GITHUB_STEP_SUMMARY

  notify-critical:
    name: Critical Security Notification
    runs-on: ubuntu-latest
    needs: [analyze, security-review]
    if: failure() && (github.event_name == 'push' || github.event_name == 'pull_request')

    steps:
    - name: Notify on Critical Security Findings
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const body = `
          ## ‚ö†Ô∏è Critical Security Analysis Failed

          **Check these areas:**
          - CodeQL Security Findings
          - RuboCop Static Analysis
          - Bundler Audit

          **Workflow Run:** https://github.com/${owner}/${repo}/actions/runs/${context.runId}
          `;
          if (context.eventName === 'pull_request') {
            await github.rest.issues.createComment({
              owner, repo,
              issue_number: context.issue.number,
              body
            });
          } else {
            await github.rest.issues.create({
              owner, repo,
              title: 'üö® Critical Security Analysis Failed',
              body,
              labels: ['security', 'critical']
            });
          }
