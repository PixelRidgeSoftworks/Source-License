<!-- Order Management Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="h3 mb-1">Order Management</h1>
        <p class="text-muted mb-0">Manage customer orders, payments, and fulfillment</p>
    </div>
    <div>
        <a href="/admin/licenses/generate" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i>Manual License
        </a>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row g-4 mb-4">
    <div class="col-xl-3 col-md-6">
        <div class="stat-card">
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <div class="stat-number text-primary"><%= @total_orders %></div>
                    <div class="stat-label">Total Orders</div>
                </div>
                <div class="text-primary">
                    <i class="fas fa-shopping-cart fa-2x"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6">
        <div class="stat-card">
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <div class="stat-number text-success"><%= Order.where(status: 'completed').count %></div>
                    <div class="stat-label">Completed</div>
                </div>
                <div class="text-success">
                    <i class="fas fa-check-circle fa-2x"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6">
        <div class="stat-card">
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <div class="stat-number text-warning"><%= Order.where(status: 'pending').count %></div>
                    <div class="stat-label">Pending</div>
                </div>
                <div class="text-warning">
                    <i class="fas fa-clock fa-2x"></i>
                </div>
            </div>
        </div>
    </div>

    <div class="col-xl-3 col-md-6">
        <div class="stat-card">
            <div class="d-flex justify-content-between align-items-start">
                <div>
                    <div class="stat-number text-info"><%= format_currency(Order.where(status: 'completed').sum(:amount) || 0) %></div>
                    <div class="stat-label">Total Revenue</div>
                </div>
                <div class="text-info">
                    <i class="fas fa-dollar-sign fa-2x"></i>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Filter and Search -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" class="form-control" placeholder="Search orders, emails, customers..."
                   id="orderSearch" value="<%= h(params[:search] || '') %>" autocomplete="off">
        </div>
    </div>
    <div class="col-md-8">
        <div class="d-flex gap-2">
            <select class="form-select" id="statusFilter">
                <option value="">All Status</option>
                <option value="pending" <%= 'selected' if params[:status] == 'pending' %>>Pending</option>
                <option value="completed" <%= 'selected' if params[:status] == 'completed' %>>Completed</option>
                <option value="failed" <%= 'selected' if params[:status] == 'failed' %>>Failed</option>
                <option value="refunded" <%= 'selected' if params[:status] == 'refunded' %>>Refunded</option>
            </select>
            <select class="form-select" id="paymentMethodFilter">
                <option value="">All Payment Methods</option>
                <option value="stripe" <%= 'selected' if params[:payment_method] == 'stripe' %>>Stripe</option>
                <option value="paypal" <%= 'selected' if params[:payment_method] == 'paypal' %>>PayPal</option>
                <option value="free" <%= 'selected' if params[:payment_method] == 'free' %>>Free</option>
                <option value="manual" <%= 'selected' if params[:payment_method] == 'manual' %>>Manual</option>
            </select>
            <select class="form-select" id="dateFilter">
                <option value="">All Time</option>
                <option value="today" <%= 'selected' if params[:date_filter] == 'today' %>>Today</option>
                <option value="week" <%= 'selected' if params[:date_filter] == 'week' %>>This Week</option>
                <option value="month" <%= 'selected' if params[:date_filter] == 'month' %>>This Month</option>
                <option value="year" <%= 'selected' if params[:date_filter] == 'year' %>>This Year</option>
            </select>
            <select class="form-select" id="perPageFilter">
                <option value="25" <%= 'selected' if @per_page == 25 %>>25 per page</option>
                <option value="50" <%= 'selected' if @per_page == 50 %>>50 per page</option>
                <option value="100" <%= 'selected' if @per_page == 100 %>>100 per page</option>
            </select>
        </div>
    </div>
</div>

<!-- Bulk Actions Toolbar (initially hidden) -->
<div id="bulkActionsToolbar" class="bulk-actions-toolbar mb-3" style="display: none;">
    <div class="d-flex justify-content-between align-items-center">
        <div class="bulk-actions-info">
            <span id="selectedCount">0</span> orders selected
        </div>
        <div class="bulk-actions-buttons">
            <button class="btn btn-success btn-sm me-2" onclick="bulkComplete()">
                <i class="fas fa-check me-1"></i>Complete
            </button>
            <button class="btn btn-warning btn-sm me-2" onclick="bulkRefund()">
                <i class="fas fa-undo me-1"></i>Refund
            </button>
            <button class="btn btn-danger btn-sm me-2" onclick="bulkDelete()">
                <i class="fas fa-trash me-1"></i>Delete
            </button>
            <button class="btn btn-info btn-sm me-2" onclick="bulkExport()">
                <i class="fas fa-download me-1"></i>Export Selected
            </button>
            <button class="btn btn-secondary btn-sm" onclick="clearSelection()">
                <i class="fas fa-times me-1"></i>Clear Selection
            </button>
        </div>
    </div>
</div>

<!-- Orders Table -->
<div class="data-table">
    <h5 class="table-header">
        <i class="fas fa-shopping-cart me-2"></i>
        Orders
        <% if @total_orders > @per_page %>
        <small class="text-muted ms-2">
            (Showing <%= [(@current_page - 1) * @per_page + 1, @total_orders].min %>-<%= [@current_page * @per_page, @total_orders].min %> of <%= @total_orders %>)
        </small>
        <% end %>
    </h5>

    <div class="table-responsive orders-table-container">
        <% if @orders.any? %>
        <table class="table table-hover table-dark mb-0" id="ordersTable">
            <thead>
                <tr>
                    <th width="40">
                        <input type="checkbox" id="selectAll" class="form-check-input">
                    </th>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Amount</th>
                    <th>Status</th>
                    <th>Payment Method</th>
                    <th>Items</th>
                    <th>Created</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% @orders.each do |order| %>
                <tr class="order-row"
                    data-status="<%= order.status %>"
                    data-payment-method="<%= order.payment_method %>"
                    data-customer="<%= h(order.email.downcase) %>">
                    <td>
                        <input type="checkbox" class="form-check-input order-checkbox"
                               value="<%= order.id %>" data-order-id="<%= order.id %>">
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="order-icon me-3">
                                <%= order_status_icon(order.status) %>
                            </div>
                            <div>
                                <div class="fw-bold text-primary">
                                    <a href="/admin/orders/<%= order.id %>" class="text-decoration-none">
                                        #<%= order.id %>
                                    </a>
                                </div>
                                <% if order.payment_intent_id %>
                                <small class="text-muted font-monospace">
                                    <%= truncate(order.payment_intent_id, 20) %>
                                </small>
                                <% end %>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div>
                            <div class="fw-bold">
                                <%= h(order.customer_name || order.email.split('@').first.capitalize) %>
                            </div>
                            <small class="text-muted">
                                <a href="mailto:<%= h(order.email) %>" class="text-decoration-none">
                                    <%= h(order.email) %>
                                </a>
                            </small>
                        </div>
                    </td>
                    <td>
                        <div class="fw-bold">
                            <%= format_currency(order.amount, order.currency) %>
                        </div>
                        <small class="text-muted">
                            <%= order.currency.upcase %>
                        </small>
                    </td>
                    <td>
                        <%= status_badge(order.status) %>
                        <% if order.completed_at %>
                        <br><small class="text-success">
                            <i class="fas fa-check me-1"></i>
                            Completed <%= time_ago(order.completed_at) %>
                        </small>
                        <% elsif order.refunded_at %>
                        <br><small class="text-warning">
                            <i class="fas fa-undo me-1"></i>
                            Refunded <%= time_ago(order.refunded_at) %>
                        </small>
                        <% end %>
                    </td>
                    <td>
                        <div class="d-flex align-items-center">
                            <%= payment_method_icon(order.payment_method) %>
                            <span class="ms-2">
                                <%= order.payment_method.capitalize %>
                            </span>
                        </div>
                    </td>
                    <td>
                        <div>
                            <% if order.order_items.any? %>
                            <div class="fw-bold">
                                <%= order.order_items.count %> item(s)
                            </div>
                            <small class="text-muted">
                                <% order.order_items.first(2).each do |item| %>
                                    <div>
                                        <%= h(item.product&.name || 'Unknown Product') %>
                                        <% if item.quantity > 1 %>
                                        (×<%= item.quantity %>)
                                        <% end %>
                                    </div>
                                <% end %>
                                <% if order.order_items.count > 2 %>
                                <div>... and <%= order.order_items.count - 2 %> more</div>
                                <% end %>
                            </small>
                            <% else %>
                            <span class="text-muted">No items</span>
                            <% end %>
                        </div>
                    </td>
                    <td>
                        <div class="text-muted">
                            <%= format_date(order.created_at, :short) %>
                        </div>
                        <small class="text-muted">
                            <%= time_ago(order.created_at) %>
                        </small>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <a href="/admin/orders/<%= order.id %>"
                               class="btn btn-outline-primary"
                               title="View Details">
                                <i class="fas fa-eye"></i>
                            </a>
                            <% if order.pending? %>
                            <button class="btn btn-outline-success"
                                    onclick="updateOrderStatus(<%= order.id %>, 'completed')"
                                    title="Mark as Completed">
                                <i class="fas fa-check"></i>
                            </button>
                            <% elsif order.completed? %>
                            <button class="btn btn-outline-warning"
                                    onclick="showRefundModal(<%= order.id %>, '<%= h(order.email) %>', '<%= format_currency(order.amount, order.currency) %>')"
                                    title="Refund Order">
                                <i class="fas fa-undo"></i>
                            </button>
                            <% end %>
                            <div class="dropdown">
                                <button class="btn btn-outline-secondary dropdown-toggle"
                                        data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li>
                                        <a class="dropdown-item" href="mailto:<%= h(order.email) %>?subject=Regarding Order #<%= order.id %>">
                                            <i class="fas fa-envelope me-2"></i>Email Customer
                                        </a>
                                    </li>
                                    <% if order.licenses.any? %>
                                    <li>
                                        <a class="dropdown-item" href="/admin/licenses?search=<%= u(order.email) %>">
                                            <i class="fas fa-key me-2"></i>View Licenses
                                        </a>
                                    </li>
                                    <% end %>
                                    <li><hr class="dropdown-divider"></li>
                                    <% if order.pending? || order.failed? %>
                                    <li>
                                        <button class="dropdown-item text-danger"
                                                onclick="deleteOrder(<%= order.id %>)">
                                            <i class="fas fa-trash me-2"></i>Delete Order
                                        </button>
                                    </li>
                                    <% end %>
                                </ul>
                            </div>
                        </div>
                    </td>
                </tr>
                <% end %>
            </tbody>
        </table>
        <% else %>
        <div class="text-center py-5">
            <i class="fas fa-shopping-cart text-muted mb-3" style="font-size: 3rem;"></i>
            <h5 class="text-muted">No Orders Found</h5>
            <p class="text-muted mb-4">
                <% if params[:search] || params[:status] || params[:payment_method] || params[:date_filter] %>
                No orders match your current filters. Try adjusting your search criteria.
                <% else %>
                Orders will appear here when customers make purchases.
                <% end %>
            </p>
            <% if params[:search] || params[:status] || params[:payment_method] || params[:date_filter] %>
            <button class="btn btn-secondary" onclick="clearFilters()">
                <i class="fas fa-times me-2"></i>Clear Filters
            </button>
            <% end %>
        </div>
        <% end %>
    </div>

    <!-- Pagination -->
    <% if @total_pages > 1 %>
    <div class="card-footer" style="background: var(--surface-tertiary); border-top: 1px solid var(--border-default);">
        <div class="d-flex justify-content-between align-items-center">
            <small class="text-muted">
                Showing <%= [(@current_page - 1) * @per_page + 1, @total_orders].min %>-<%= [@current_page * @per_page, @total_orders].min %> of <%= @total_orders %> orders
            </small>

            <nav>
                <ul class="pagination pagination-sm mb-0">
                    <!-- Previous button -->
                    <% if @current_page > 1 %>
                    <li class="page-item">
                        <a class="page-link" href="<%= build_pagination_url(@current_page - 1) %>">Previous</a>
                    </li>
                    <% else %>
                    <li class="page-item disabled">
                        <span class="page-link">Previous</span>
                    </li>
                    <% end %>

                    <!-- Page numbers -->
                    <%
                    start_page = [@current_page - 2, 1].max
                    end_page = [start_page + 4, @total_pages].min
                    start_page = [end_page - 4, 1].max if end_page - start_page < 4
                    %>

                    <% if start_page > 1 %>
                    <li class="page-item">
                        <a class="page-link" href="<%= build_pagination_url(1) %>">1</a>
                    </li>
                    <% if start_page > 2 %>
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                    <% end %>
                    <% end %>

                    <% (start_page..end_page).each do |page| %>
                    <% if page == @current_page %>
                    <li class="page-item active">
                        <span class="page-link"><%= page %></span>
                    </li>
                    <% else %>
                    <li class="page-item">
                        <a class="page-link" href="<%= build_pagination_url(page) %>"><%= page %></a>
                    </li>
                    <% end %>
                    <% end %>

                    <% if end_page < @total_pages %>
                    <% if end_page < @total_pages - 1 %>
                    <li class="page-item disabled">
                        <span class="page-link">...</span>
                    </li>
                    <% end %>
                    <li class="page-item">
                        <a class="page-link" href="<%= build_pagination_url(@total_pages) %>"><%= @total_pages %></a>
                    </li>
                    <% end %>

                    <!-- Next button -->
                    <% if @current_page < @total_pages %>
                    <li class="page-item">
                        <a class="page-link" href="<%= build_pagination_url(@current_page + 1) %>">Next</a>
                    </li>
                    <% else %>
                    <li class="page-item disabled">
                        <span class="page-link">Next</span>
                    </li>
                    <% end %>
                </ul>
            </nav>

            <div class="btn-group btn-group-sm">
                <button class="btn btn-outline-secondary" onclick="exportOrders()">
                    <i class="fas fa-download me-1"></i>Export All
                </button>
            </div>
        </div>
    </div>
    <% elsif @orders.any? %>
    <div class="card-footer" style="background: var(--surface-tertiary); border-top: 1px solid var(--border-default);">
        <div class="d-flex justify-content-between align-items-center">
            <small class="text-muted">
                Showing all <%= @total_orders %> orders
            </small>
            <div class="btn-group btn-group-sm">
                <button class="btn btn-outline-secondary" onclick="exportOrders()">
                    <i class="fas fa-download me-1"></i>Export All
                </button>
            </div>
        </div>
    </div>
    <% end %>
</div>

<!-- Order Management JavaScript -->
<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('orderSearch');
    const statusFilter = document.getElementById('statusFilter');
    const paymentMethodFilter = document.getElementById('paymentMethodFilter');
    const dateFilter = document.getElementById('dateFilter');
    const perPageFilter = document.getElementById('perPageFilter');
    const selectAllCheckbox = document.getElementById('selectAll');
    const orderCheckboxes = document.querySelectorAll('.order-checkbox');
    const bulkToolbar = document.getElementById('bulkActionsToolbar');
    const selectedCountElement = document.getElementById('selectedCount');

    // Build pagination URL helper
    window.buildPaginationUrl = function(page) {
        const params = new URLSearchParams(window.location.search);
        params.set('page', page);
        return '?' + params.toString();
    };

    // Filter functionality
    function applyFilters() {
        const params = new URLSearchParams();

        const search = searchInput.value.trim();
        const status = statusFilter.value;
        const paymentMethod = paymentMethodFilter.value;
        const dateRange = dateFilter.value;
        const perPage = perPageFilter.value;

        if (search) params.set('search', search);
        if (status) params.set('status', status);
        if (paymentMethod) params.set('payment_method', paymentMethod);
        if (dateRange) params.set('date_filter', dateRange);
        if (perPage !== '50') params.set('per_page', perPage);

        const url = window.location.pathname + (params.toString() ? '?' + params.toString() : '');
        window.location.href = url;
    }

    // Clear filters
    window.clearFilters = function() {
        window.location.href = window.location.pathname;
    };

    // Debounced search
    let searchTimeout;
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(applyFilters, 500);
        });
    }

    // Filter change handlers
    if (statusFilter) statusFilter.addEventListener('change', applyFilters);
    if (paymentMethodFilter) paymentMethodFilter.addEventListener('change', applyFilters);
    if (dateFilter) dateFilter.addEventListener('change', applyFilters);
    if (perPageFilter) perPageFilter.addEventListener('change', applyFilters);

    // Bulk selection functionality
    function updateBulkSelection() {
        const checkedBoxes = Array.from(orderCheckboxes).filter(cb => cb.checked);

        // Update select all checkbox state
        if (checkedBoxes.length === 0) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = false;
        } else if (checkedBoxes.length === orderCheckboxes.length) {
            selectAllCheckbox.indeterminate = false;
            selectAllCheckbox.checked = true;
        } else {
            selectAllCheckbox.indeterminate = true;
            selectAllCheckbox.checked = false;
        }

        // Show/hide bulk actions toolbar
        if (checkedBoxes.length > 0) {
            bulkToolbar.style.display = 'block';
            selectedCountElement.textContent = checkedBoxes.length;
        } else {
            bulkToolbar.style.display = 'none';
        }
    }

    // Select all checkbox handler
    if (selectAllCheckbox) {
        selectAllCheckbox.addEventListener('change', function() {
            orderCheckboxes.forEach(checkbox => {
                checkbox.checked = this.checked;
            });
            updateBulkSelection();
        });
    }

    // Individual checkbox handlers
    orderCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', updateBulkSelection);
    });
});

// Get selected order IDs
function getSelectedOrderIds() {
    return Array.from(document.querySelectorAll('.order-checkbox:checked')).map(cb => cb.value);
}

// Clear selection
function clearSelection() {
    document.querySelectorAll('.order-checkbox').forEach(cb => cb.checked = false);
    document.getElementById('selectAll').checked = false;
    document.getElementById('selectAll').indeterminate = false;
    document.getElementById('bulkActionsToolbar').style.display = 'none';
}

// Custom Modal System
function showCustomModal(title, message, details, type = 'info', buttons = null) {
    // Remove existing modal if any
    const existingModal = document.getElementById('customModal');
    if (existingModal) {
        existingModal.remove();
    }

    // Create modal HTML
    const modal = document.createElement('div');
    modal.id = 'customModal';
    modal.className = 'custom-modal-overlay';

    const iconClass = type === 'warning' ? 'fas fa-exclamation-triangle' :
                     type === 'danger' ? 'fas fa-exclamation-circle' :
                     type === 'success' ? 'fas fa-check-circle' :
                     'fas fa-info-circle';

    const iconColor = type === 'warning' ? '#ffc107' :
                     type === 'danger' ? '#dc3545' :
                     type === 'success' ? '#28a745' :
                     '#17a2b8';

    modal.innerHTML = `
        <div class="custom-modal">
            <div class="custom-modal-header">
                <i class="${iconClass}" style="color: ${iconColor};"></i>
                <h3>${title}</h3>
                <button class="custom-modal-close" onclick="closeCustomModal()">&times;</button>
            </div>
            <div class="custom-modal-body">
                <p class="custom-modal-message">${message}</p>
                ${details ? `<p class="custom-modal-details">${details}</p>` : ''}
            </div>
            <div class="custom-modal-footer">
                ${buttons || '<button class="custom-btn custom-btn-primary" onclick="closeCustomModal()">OK</button>'}
            </div>
        </div>
    `;

    document.body.appendChild(modal);

    // Show modal with animation
    setTimeout(() => modal.classList.add('show'), 10);

    // Focus first button
    const firstButton = modal.querySelector('button:not(.custom-modal-close)');
    if (firstButton) firstButton.focus();

    return modal;
}

function closeCustomModal() {
    const modal = document.getElementById('customModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => modal.remove(), 300);
    }
}

function showAlert(title, message, type = 'info') {
    showCustomModal(title, message, null, type);
}

function showConfirm(title, message, details, onConfirm, onCancel = null, type = 'warning') {
    const buttons = `
        <button class="custom-btn custom-btn-secondary" id="confirmCancel">Cancel</button>
        <button class="custom-btn custom-btn-${type === 'danger' ? 'danger' : 'primary'}" id="confirmSubmit">Confirm</button>
    `;

    const modal = showCustomModal(title, message, details, type, buttons);

    // Add event listeners after modal is created
    setTimeout(() => {
        const cancelBtn = document.getElementById('confirmCancel');
        const confirmBtn = document.getElementById('confirmSubmit');

        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => {
                closeCustomModal();
                if (onCancel) onCancel();
            });
        }

        if (confirmBtn) {
            confirmBtn.addEventListener('click', () => {
                closeCustomModal();
                onConfirm();
            });
        }
    }, 50);
}

// Bulk complete orders
function bulkComplete() {
    const orderIds = getSelectedOrderIds();

    if (orderIds.length === 0) {
        showAlert('No Selection', 'Please select orders to complete.', 'warning');
        return;
    }

    showConfirm(
        'Complete Orders',
        `Are you sure you want to mark ${orderIds.length} selected orders as completed?`,
        'This will generate licenses for pending orders.',
        () => performBulkAction('complete', orderIds),
        null,
        'success'
    );
}

// Bulk refund orders
function bulkRefund() {
    const orderIds = getSelectedOrderIds();

    if (orderIds.length === 0) {
        showAlert('No Selection', 'Please select orders to refund.', 'warning');
        return;
    }

    showConfirm(
        'Refund Orders',
        `Are you sure you want to refund ${orderIds.length} selected orders?`,
        'This will refund the orders and revoke any associated licenses!',
        () => performBulkAction('refund', orderIds),
        null,
        'danger'
    );
}

// Bulk delete orders
function bulkDelete() {
    const orderIds = getSelectedOrderIds();

    if (orderIds.length === 0) {
        showAlert('No Selection', 'Please select orders to delete.', 'warning');
        return;
    }

    showConfirm(
        'Delete Orders',
        `WARNING: Are you sure you want to DELETE ${orderIds.length} selected orders?`,
        'This will permanently remove the orders and any associated data! This action CANNOT be undone!',
        () => performBulkAction('delete', orderIds),
        null,
        'danger'
    );
}

// Bulk export orders
function bulkExport() {
    const orderIds = getSelectedOrderIds();

    if (orderIds.length === 0) {
        showAlert('No Selection', 'Please select orders to export.', 'warning');
        return;
    }

    const params = new URLSearchParams({ order_ids: orderIds.join(',') });
    window.location.href = `/admin/orders/export?${params.toString()}`;
}

// Perform bulk action
function performBulkAction(action, orderIds) {
    const loadingText = action === 'complete' ? 'Completing...' :
                       action === 'refund' ? 'Refunding...' : 'Deleting...';

    // Show loading state
    const toolbar = document.getElementById('bulkActionsToolbar');
    const originalHTML = toolbar.innerHTML;
    toolbar.innerHTML = `<div class="d-flex align-items-center"><div class="spinner-border spinner-border-sm me-2"></div>${loadingText}</div>`;

    fetch('/admin/orders/bulk-action', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({
            action: action,
            order_ids: orderIds
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            if (data.results) {
                let message = `Bulk ${action} completed:\n`;
                message += `✓ Success: ${data.results.success || 0}\n`;
                if (data.results.failed > 0) {
                    message += `✗ Failed: ${data.results.failed}\n`;
                    if (data.results.errors && data.results.errors.length > 0) {
                        message += `\nErrors:\n${data.results.errors.slice(0, 3).join('\n')}`;
                        if (data.results.errors.length > 3) {
                            message += `\n... and ${data.results.errors.length - 3} more`;
                        }
                    }
                }

                // Show modal and reload after user dismisses it
                showConfirm('Bulk Action Complete', message, 'The page will refresh to show updated data.',
                    () => location.reload(), // On OK click
                    () => location.reload(), // On Cancel/close (still reload)
                    'success'
                );
            } else {
                location.reload();
            }
        } else {
            showAlert('Error', data.error || 'Unknown error occurred', 'danger');
            toolbar.innerHTML = originalHTML;
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('Error', 'An error occurred while performing the bulk action.', 'danger');
        toolbar.innerHTML = originalHTML;
    });
}

// Update order status
function updateOrderStatus(orderId, newStatus) {
    const confirmText = newStatus === 'completed' ?
        'Are you sure you want to mark this order as completed?' :
        newStatus === 'refunded' ?
        'Are you sure you want to refund this order?' :
        `Are you sure you want to update this order status to ${newStatus}?`;

    const detailsText = newStatus === 'completed' ?
        'This will generate licenses if not already done.' :
        newStatus === 'refunded' ?
        'This will revoke any associated licenses.' : null;

    const type = newStatus === 'completed' ? 'success' :
                 newStatus === 'refunded' ? 'danger' : 'warning';

    showConfirm(
        'Update Order Status',
        confirmText,
        detailsText,
        () => {
            fetch(`/admin/orders/${orderId}/update-status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ status: newStatus })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show success message and reload after user dismisses it
                    showConfirm('Status Updated',
                        `Order status has been successfully updated to ${newStatus}.`,
                        'The page will refresh to show updated data.',
                        () => location.reload(),
                        () => location.reload(),
                        'success'
                    );
                } else {
                    showAlert('Error', data.error, 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error', 'An error occurred while updating the order status.', 'danger');
            });
        },
        null,
        type
    );
}

// Delete order
function deleteOrder(orderId) {
    showConfirm(
        'Delete Order',
        'Are you sure you want to delete this order?',
        'This action cannot be undone.',
        () => performBulkAction('delete', [orderId]),
        null,
        'danger'
    );
}

// Export orders
function exportOrders() {
    window.location.href = '/admin/orders/export';
}

// Stat card click handlers
document.querySelectorAll('.stat-card').forEach(card => {
    card.style.cursor = 'pointer';
    card.addEventListener('click', function() {
        const label = this.querySelector('.stat-label').textContent.toLowerCase();
        const statusFilter = document.getElementById('statusFilter');

        // Reset filters
        statusFilter.value = '';

        switch(label) {
            case 'completed':
                statusFilter.value = 'completed';
                break;
            case 'pending':
                statusFilter.value = 'pending';
                break;
        }

        // Trigger filter
        if (statusFilter.value) {
            statusFilter.dispatchEvent(new Event('change'));
        }
    });
});
</script>

<!-- Custom Styles -->
<style>
.order-icon {
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.1rem;
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
}

.btn-group-sm .btn {
    padding: 0.25rem 0.5rem;
}

.order-row:hover {
    background-color: var(--surface-tertiary);
}

.table th {
    border-bottom: 2px solid var(--border-default);
    font-weight: 600;
    color: var(--text-primary);
}

.dropdown-menu {
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
}

.dropdown-item {
    color: var(--text-primary);
}

.dropdown-item:hover {
    background: var(--surface-tertiary);
    color: var(--accent-primary);
}

/* Bulk Actions Toolbar */
.bulk-actions-toolbar {
    background: var(--surface-secondary);
    border: 1px solid var(--accent-primary);
    border-radius: 8px;
    padding: 1rem;
    box-shadow: var(--shadow);
    animation: slideInDown 0.3s ease-out;
}

.bulk-actions-info {
    color: var(--text-primary);
    font-weight: 500;
}

.bulk-actions-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
}

@keyframes slideInDown {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Selected row highlighting */
.order-row:has(.order-checkbox:checked) {
    background-color: rgba(35, 134, 54, 0.1) !important;
    border-left: 3px solid var(--accent-primary);
}

/* Checkbox styling */
.form-check-input:checked {
    background-color: var(--accent-primary);
    border-color: var(--accent-primary);
}

.form-check-input:focus {
    box-shadow: 0 0 0 0.25rem rgba(35, 134, 54, 0.25);
}

/* Pagination styling */
.pagination-sm .page-link {
    background: var(--surface-secondary);
    border-color: var(--border-default);
    color: var(--text-primary);
}

.pagination-sm .page-link:hover {
    background: var(--surface-tertiary);
    border-color: var(--accent-primary);
    color: var(--accent-primary);
}

.pagination-sm .page-item.active .page-link {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
}

.pagination-sm .page-item.disabled .page-link {
    background: var(--surface-secondary);
    border-color: var(--border-muted);
    color: var(--text-muted);
}

/* Font monospace for order IDs */
.font-monospace {
    font-family: 'Courier New', monospace;
    letter-spacing: 0.5px;
}

/* Orders table container styling */
.orders-table-container {
    min-height: 400px; /* Reasonable minimum height for dropdowns without excessive scrolling */
    position: relative;
}

.orders-table-container .table {
    margin-bottom: 0;
}

/* Custom Modal Styles */
.custom-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.custom-modal-overlay.show {
    opacity: 1;
}

.custom-modal {
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    width: 90%;
    max-height: 80vh;
    overflow: hidden;
    transform: scale(0.9) translateY(-20px);
    transition: transform 0.3s ease;
}

.custom-modal-overlay.show .custom-modal {
    transform: scale(1) translateY(0);
}

.custom-modal-header {
    display: flex;
    align-items: center;
    padding: 1.25rem 1.5rem;
    background: var(--surface-tertiary);
    border-bottom: 1px solid var(--border-default);
    gap: 0.75rem;
}

.custom-modal-header h3 {
    margin: 0;
    color: var(--text-primary);
    font-size: 1.25rem;
    font-weight: 600;
    flex: 1;
}

.custom-modal-close {
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: all 0.2s ease;
}

.custom-modal-close:hover {
    background: var(--surface-quaternary);
    color: var(--text-primary);
}

.custom-modal-body {
    padding: 1.5rem;
}

.custom-modal-message {
    margin: 0 0 0.75rem 0;
    color: var(--text-primary);
    font-size: 1rem;
    line-height: 1.5;
}

.custom-modal-details {
    margin: 0;
    color: var(--text-secondary);
    font-size: 0.9rem;
    line-height: 1.4;
    padding: 0.75rem 1rem;
    background: var(--surface-tertiary);
    border-radius: 8px;
    border-left: 3px solid var(--accent-primary);
}

.custom-modal-footer {
    padding: 1rem 1.5rem;
    background: var(--surface-tertiary);
    border-top: 1px solid var(--border-default);
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
}

/* Custom Button Styles */
.custom-btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 6px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 80px;
}

.custom-btn-primary {
    background: var(--accent-primary);
    color: white;
}

.custom-btn-primary:hover {
    background: #1e7e34;
    transform: translateY(-1px);
}

.custom-btn-secondary {
    background: var(--surface-quaternary);
    color: var(--text-primary);
    border: 1px solid var(--border-default);
}

.custom-btn-secondary:hover {
    background: var(--surface-tertiary);
    border-color: var(--accent-primary);
}

.custom-btn-danger {
    background: #dc3545;
    color: white;
}

.custom-btn-danger:hover {
    background: #c82333;
    transform: translateY(-1px);
}

/* Custom Refund Modal Styles */
.custom-refund-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.custom-refund-modal-overlay.show {
    opacity: 1;
}

.custom-refund-modal {
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    max-width: 450px;
    width: 90%;
    max-height: 80vh;
    overflow: hidden;
    transform: scale(0.9) translateY(-20px);
    transition: transform 0.3s ease;
}

.custom-refund-modal-overlay.show .custom-refund-modal {
    transform: scale(1) translateY(0);
}

.custom-refund-modal-header {
    display: flex;
    align-items: center;
    padding: 1.25rem 1.5rem;
    background: var(--surface-tertiary);
    border-bottom: 1px solid var(--border-default);
    gap: 0.75rem;
}

.custom-refund-modal-header h3 {
    margin: 0;
    color: var(--text-primary);
    font-size: 1.25rem;
    font-weight: 600;
    flex: 1;
}

.custom-refund-modal-body {
    padding: 1.5rem;
}

.refund-warning {
    background: rgba(255, 193, 7, 0.1);
    border: 1px solid #ffc107;
    border-radius: 8px;
    padding: 0.75rem 1rem;
    margin-bottom: 1.5rem;
    color: #856404;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.refund-details {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: var(--surface-tertiary);
    border-radius: 8px;
}

.refund-detail-item.full-width {
    grid-column: 1 / -1;
}

.refund-detail-item small {
    color: var(--text-muted);
    font-size: 0.8rem;
    display: block;
    margin-bottom: 0.25rem;
}

.refund-detail-item strong,
.refund-detail-item span {
    color: var(--text-primary);
    font-weight: 600;
}

.refund-form-group {
    margin-bottom: 1rem;
}

.refund-form-group label {
    display: block;
    color: var(--text-primary);
    font-weight: 500;
    margin-bottom: 0.5rem;
}

.refund-amount-input {
    display: flex;
    align-items: center;
    background: var(--surface-primary);
    border: 1px solid var(--border-default);
    border-radius: 6px;
    overflow: hidden;
}

.currency-symbol {
    padding: 0.5rem 0.75rem;
    background: var(--surface-tertiary);
    color: var(--text-primary);
    font-weight: 500;
    border-right: 1px solid var(--border-default);
}

.refund-amount-input input {
    flex: 1;
    padding: 0.5rem 0.75rem;
    border: none;
    background: transparent;
    color: var(--text-primary);
    outline: none;
}

.full-refund-btn {
    padding: 0.5rem 0.75rem;
    background: var(--accent-primary);
    color: white;
    border: none;
    border-left: 1px solid var(--border-default);
    cursor: pointer;
    font-size: 0.875rem;
    transition: background 0.2s ease;
}

.full-refund-btn:hover {
    background: #1e7e34;
}

.refund-form-group select,
.refund-form-group input[type="text"] {
    width: 100%;
    padding: 0.5rem 0.75rem;
    background: var(--surface-primary);
    border: 1px solid var(--border-default);
    border-radius: 6px;
    color: var(--text-primary);
    outline: none;
    transition: border-color 0.2s ease;
}

.refund-form-group select:focus,
.refund-form-group input[type="text"]:focus,
.refund-amount-input:focus-within {
    border-color: var(--accent-primary);
}

.custom-refund-modal-footer {
    padding: 1rem 1.5rem;
    background: var(--surface-tertiary);
    border-top: 1px solid var(--border-default);
    display: flex;
    gap: 0.75rem;
    justify-content: flex-end;
}

.custom-btn-warning {
    background: #ffc107;
    color: #212529;
}

.custom-btn-warning:hover {
    background: #e0a800;
    transform: translateY(-1px);
}

.custom-btn-warning:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
}

/* Ensure dropdown menus don't cause scrolling */
.dropdown-menu {
    position: absolute;
    z-index: 1050;
    max-height: 300px;
    overflow-y: auto;
    /* Hide scrollbar while maintaining functionality */
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* Internet Explorer and Edge */
}

/* Hide scrollbar for Chrome, Safari and Opera */
.dropdown-menu::-webkit-scrollbar {
    display: none;
}

/* Table wrapper to handle overflow properly */
.data-table {
    position: relative;
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
    border-radius: 12px;
    box-shadow: var(--shadow);
    overflow: hidden;
}

.table-header {
    background-color: var(--surface-tertiary);
    border-bottom: 1px solid var(--border-default);
    padding: 1rem 1.5rem;
    margin: 0;
    font-weight: 600;
    color: var(--text-primary);
}

/* Empty state styling */
.orders-table-container .text-center {
    min-height: 350px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

/* Responsive bulk actions */
@media (max-width: 768px) {
    .bulk-actions-toolbar .d-flex {
        flex-direction: column;
        align-items: stretch !important;
    }

    .bulk-actions-buttons {
        margin-top: 1rem;
        justify-content: center;
    }

    .bulk-actions-buttons .btn {
        flex: 1;
        min-width: 120px;
    }

    .table-responsive {
        font-size: 0.875rem;
    }

    .order-row .fw-bold {
        font-size: 0.8rem;
    }

    .order-row small {
        font-size: 0.7rem;
    }

    /* Reduce minimum height on mobile */
    .orders-table-container {
        min-height: 50vh;
    }

    .orders-table-container .text-center {
        min-height: 40vh;
    }
}

/* Ensure proper spacing for dropdown overlays */
.btn-group {
    position: relative;
}

.dropdown-toggle::after {
    margin-left: 0.5em;
}
</style>

<!-- Custom Refund Modal -->
<div id="refundModal" class="custom-refund-modal-overlay" style="display: none;">
    <div class="custom-refund-modal">
        <div class="custom-refund-modal-header">
            <i class="fas fa-undo" style="color: #ffc107;"></i>
            <h3>Refund Order</h3>
            <button class="custom-modal-close" onclick="closeRefundModal()">&times;</button>
        </div>
        <div class="custom-refund-modal-body">
            <div class="refund-warning">
                <i class="fas fa-exclamation-triangle"></i>
                <strong>Warning:</strong> This will refund payment and revoke licenses.
            </div>

            <div class="refund-details">
                <div class="refund-detail-item">
                    <small>Order ID:</small>
                    <strong id="refundOrderId"></strong>
                </div>
                <div class="refund-detail-item">
                    <small>Amount:</small>
                    <strong id="refundOrderAmount"></strong>
                </div>
                <div class="refund-detail-item full-width">
                    <small>Customer:</small>
                    <span id="refundCustomerEmail"></span>
                </div>
            </div>

            <div class="refund-form-group">
                <label for="refundAmount">Refund Amount</label>
                <div class="refund-amount-input">
                    <span class="currency-symbol">$</span>
                    <input type="number" id="refundAmount" step="0.01" min="0.01" placeholder="0.00" autocomplete="off">
                    <button type="button" class="full-refund-btn" onclick="setFullRefund()">Full</button>
                </div>
            </div>

            <div class="refund-form-group">
                <label for="refundReason">Reason</label>
                <select id="refundReason">
                    <option value="Admin initiated refund">Admin initiated refund</option>
                    <option value="Customer request">Customer request</option>
                    <option value="Product defect">Product defect</option>
                    <option value="Billing error">Billing error</option>
                    <option value="Duplicate charge">Duplicate charge</option>
                    <option value="Fraudulent transaction">Fraudulent transaction</option>
                    <option value="Other">Other</option>
                </select>
            </div>

            <div class="refund-form-group" id="customReasonGroup" style="display: none;">
                <input type="text" id="customReason" placeholder="Enter custom reason" autocomplete="off">
            </div>
        </div>
        <div class="custom-refund-modal-footer">
            <button class="custom-btn custom-btn-secondary" onclick="closeRefundModal()">Cancel</button>
            <button class="custom-btn custom-btn-warning" id="processRefundBtn" onclick="processRefund()">
                <i class="fas fa-undo"></i>Process Refund
            </button>
        </div>
    </div>
</div>

<script>
// Refund modal functionality
let currentRefundOrderId = null;
let currentRefundAmount = 0;

function showRefundModal(orderId, customerEmail, orderAmount) {
    currentRefundOrderId = orderId;

    // Parse the amount (remove currency symbols and convert to number)
    const amountStr = orderAmount.replace(/[^\d.,]/g, '').replace(',', '');
    currentRefundAmount = parseFloat(amountStr);

    // Populate modal fields
    document.getElementById('refundOrderId').textContent = '#' + orderId;
    document.getElementById('refundCustomerEmail').textContent = customerEmail;
    document.getElementById('refundOrderAmount').textContent = orderAmount;
    document.getElementById('refundAmount').value = currentRefundAmount;
    document.getElementById('refundReason').value = 'Admin initiated refund';
    document.getElementById('customReason').value = '';
    document.getElementById('customReasonGroup').style.display = 'none';

    // Show custom modal
    const modal = document.getElementById('refundModal');
    modal.style.display = 'flex';
    setTimeout(() => modal.classList.add('show'), 10);

    // Focus the refund amount field
    document.getElementById('refundAmount').focus();
}

function closeRefundModal() {
    const modal = document.getElementById('refundModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => modal.style.display = 'none', 300);
    }
}

function setFullRefund() {
    document.getElementById('refundAmount').value = currentRefundAmount;
}

// Show custom reason input when "Other" is selected
document.getElementById('refundReason').addEventListener('change', function() {
    const customReasonGroup = document.getElementById('customReasonGroup');
    if (this.value === 'Other') {
        customReasonGroup.style.display = 'block';
        document.getElementById('customReason').focus();
    } else {
        customReasonGroup.style.display = 'none';
    }
});

function updateOrderRowStatus(orderId, newStatus) {
    // Find the order row
    const orderRow = document.querySelector(`tr[data-order-id="${orderId}"]`) ||
                     document.querySelector(`input[data-order-id="${orderId}"]`)?.closest('tr');

    if (orderRow) {
        // Update the status badge
        const statusCell = orderRow.querySelector('td:nth-child(5)'); // Status column
        if (statusCell && newStatus === 'refunded') {
            statusCell.innerHTML = `
                <span class="badge bg-warning">Refunded</span>
                <br><small class="text-warning">
                    <i class="fas fa-undo me-1"></i>
                    Refunded just now
                </small>
            `;
        }

        // Remove refund button from actions column
        const actionsCell = orderRow.querySelector('td:last-child');
        if (actionsCell) {
            const refundBtn = actionsCell.querySelector('button[onclick*="showRefundModal"]');
            if (refundBtn) {
                refundBtn.remove();
            }
        }

        // Update row data attribute
        orderRow.setAttribute('data-status', newStatus);

        // Add visual feedback
        orderRow.style.backgroundColor = 'rgba(255, 193, 7, 0.1)';
        setTimeout(() => {
            orderRow.style.backgroundColor = '';
        }, 3000);
    }
}

function processRefund() {
    const refundAmount = parseFloat(document.getElementById('refundAmount').value);
    let refundReason = document.getElementById('refundReason').value;

    if (refundReason === 'Other') {
        const customReason = document.getElementById('customReason').value.trim();
        if (!customReason) {
            showAlert('Validation Error', 'Please enter a custom refund reason.', 'warning');
            return;
        }
        refundReason = customReason;
    }

    // Validate refund amount
    if (!refundAmount || refundAmount <= 0) {
        showAlert('Validation Error', 'Please enter a valid refund amount.', 'warning');
        return;
    }

    if (refundAmount > currentRefundAmount) {
        showAlert('Validation Error', 'Refund amount cannot exceed the order amount.', 'warning');
        return;
    }

    // Confirm refund with custom modal
    const confirmMessage = `Are you sure you want to process a $${refundAmount.toFixed(2)} refund for order #${currentRefundOrderId}?`;
    const detailsMessage = `<strong>Reason:</strong> ${refundReason}<br><br>This action cannot be undone and will:<br>• Process the refund through the payment processor<br>• Revoke any associated licenses<br>• Cancel any active subscriptions`;

    showConfirm(
        'Process Refund',
        confirmMessage,
        detailsMessage,
        () => {
            // Show loading state
            const processBtn = document.getElementById('processRefundBtn');
            const originalText = processBtn.innerHTML;
            processBtn.disabled = true;
            processBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span>Processing...';

            // Process refund
            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');

            fetch(`/admin/orders/${currentRefundOrderId}/refund`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                    ...(csrfToken && { 'X-CSRF-Token': csrfToken })
                },
                body: JSON.stringify({
                    amount: refundAmount,
                    reason: refundReason
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                // Restore button state first
                processBtn.disabled = false;
                processBtn.innerHTML = originalText;

                if (data.success) {
                    // Hide modal
                    closeRefundModal();

                    // Show success message immediately without waiting for modal to hide
                    const amount = parseFloat(data.amount) || refundAmount;
                    const formattedAmount = `$${amount.toFixed(2)}`;
                    showAlert('Refund Successful', `Refund processed successfully!<br><br><strong>Refund ID:</strong> ${data.refund_id || 'N/A'}<br><strong>Amount:</strong> ${formattedAmount}`, 'success');

                    // Update the order row status immediately without page reload
                    updateOrderRowStatus(currentRefundOrderId, 'refunded');
                } else {
                    showAlert('Refund Failed', data.error || 'Unknown error occurred', 'danger');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showAlert('Error', 'An error occurred while processing the refund.', 'danger');

                // Restore button state
                processBtn.disabled = false;
                processBtn.innerHTML = originalText;
            });
        },
        null,
        'danger'
    );
}
</script>

<%
# Helper method for building pagination URLs with current filters
def build_pagination_url(page)
  params_copy = params.dup
  params_copy['page'] = page.to_s
  params_copy.delete('page') if page == 1

  query_string = params_copy.reject { |k, v| v.nil? || v.empty? }
                           .map { |k, v| "#{k}=#{CGI.escape(v.to_s)}" }
                           .join('&')

  query_string.empty? ? request.path : "#{request.path}?#{query_string}"
end
%>
