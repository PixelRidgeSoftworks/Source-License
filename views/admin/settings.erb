<!-- Modern Settings Header -->
<div class="mb-5">
    <div class="row align-items-center">
        <div class="col">
            <h1 class="display-6 fw-bold text-gradient mb-2">System Settings</h1>
            <p class="lead text-muted mb-0">Manage and configure your license management system</p>
        </div>
        <div class="col-auto">
            <div class="btn-group" role="group">
                <button class="btn btn-outline-info" onclick="exportSettings()" data-bs-toggle="tooltip" title="Export Settings">
                    <i class="fas fa-download"></i>
                </button>
                <button class="btn btn-outline-warning" onclick="showImportModal()" data-bs-toggle="tooltip" title="Import Settings">
                    <i class="fas fa-upload"></i>
                </button>
                <button class="btn btn-outline-primary" onclick="generateEnvFile()" data-bs-toggle="tooltip" title="Generate .env File">
                    <i class="fas fa-file-code"></i>
                </button>
                <button class="btn btn-outline-success" onclick="loadSettings()" data-bs-toggle="tooltip" title="Refresh">
                    <i class="fas fa-sync-alt"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Main Settings Layout -->
<div class="row g-4">
    <!-- Category Navigation Sidebar -->
    <div class="col-xl-3 col-lg-4">
        <div class="sticky-top" style="top: 1rem;">
            <div class="settings-nav-card">
                <div class="nav nav-pills flex-column" id="settingsNav" role="tablist">
                    <!-- Categories will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Main Settings Content -->
    <div class="col-xl-9 col-lg-8">
        <div id="settingsContent">
            <div class="welcome-state text-center py-5">
                <div class="welcome-icon mb-4">
                    <i class="fas fa-cog fa-4x text-primary opacity-25"></i>
                </div>
                <h3 class="fw-bold mb-3">Welcome to Settings</h3>
                <p class="text-muted mb-4">Select a category from the sidebar to begin configuring your system.</p>
                <div class="d-flex justify-content-center gap-2">
                    <span class="badge bg-primary bg-opacity-10 text-primary px-3 py-2">Secure</span>
                    <span class="badge bg-success bg-opacity-10 text-success px-3 py-2">Real-time</span>
                    <span class="badge bg-info bg-opacity-10 text-info px-3 py-2">Validated</span>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Import Settings Modal -->
<div class="modal fade" id="importModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-upload me-2"></i>Import Settings
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="importForm" enctype="multipart/form-data">
                    <div class="mb-3">
                        <label for="importFile" class="form-label">Select YAML file</label>
                        <input type="file" class="form-control" id="importFile" name="file" accept=".yml,.yaml" required>
                        <div class="form-text">Upload a YAML file containing settings configuration</div>
                    </div>

                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        <strong>Warning:</strong> Importing settings will overwrite existing values. Make sure to export current settings first.
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="importSettings()">Import Settings</button>
            </div>
        </div>
    </div>
</div>

<!-- Test Results Modal -->
<div class="modal fade" id="testResultsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-flask me-2"></i>Configuration Test Results
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="testResultsContent">
                <!-- Test results will be loaded here -->
            </div>
        </div>
    </div>
</div>

<!-- Quick Actions Section -->
<div class="mt-5">
    <h3 class="h4 mb-4">Quick Actions</h3>
    <div class="row g-3">
        <div class="col-md-3">
            <button class="btn btn-outline-primary w-100" onclick="location.href='/admin/customize/preview'">
                <i class="fas fa-eye me-2"></i>Preview Site
            </button>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-success w-100" onclick="location.href='/admin/products/new'">
                <i class="fas fa-plus me-2"></i>Add Product
            </button>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-info w-100" onclick="location.href='/admin/licenses/generate'">
                <i class="fas fa-key me-2"></i>Generate License
            </button>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-warning w-100" onclick="exportData()">
                <i class="fas fa-download me-2"></i>Export Data
            </button>
        </div>
    </div>
</div>

<!-- Settings Modals -->
<!-- Payment Settings Modal -->
<div class="modal fade" id="paymentModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-credit-card me-2"></i>Payment Settings
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted">Configure payment gateway settings in your <code>.env</code> file:</p>

                <div class="row g-4">
                    <div class="col-md-6">
                        <h6>Stripe Configuration</h6>
                        <pre class="bg-light p-3 rounded small"><code>STRIPE_PUBLISHABLE_KEY=pk_test_...
STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...</code></pre>
                    </div>
                    <div class="col-md-6">
                        <h6>PayPal Configuration</h6>
                        <pre class="bg-light p-3 rounded small"><code>PAYPAL_CLIENT_ID=your_client_id
PAYPAL_CLIENT_SECRET=your_secret
PAYPAL_ENVIRONMENT=sandbox</code></pre>
                    </div>
                </div>

                <div class="alert alert-warning mt-3">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Important:</strong> Restart the application after updating environment variables.
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Email Settings Modal -->
<div class="modal fade" id="emailModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-envelope me-2"></i>Email Settings
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p class="text-muted">Configure SMTP settings in your <code>.env</code> file:</p>

                <pre class="bg-light p-3 rounded small"><code>SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USERNAME=your_email@gmail.com
SMTP_PASSWORD=your_app_password
SMTP_TLS=true</code></pre>

                <div class="alert alert-info mt-3">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Gmail Users:</strong> Use an App Password instead of your regular password.
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Custom Settings Styles -->
<style>
.text-gradient {
    background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

.settings-nav-card {
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: var(--shadow);
}

.nav-pills .nav-link {
    background: transparent;
    border: 1px solid transparent;
    color: var(--text-secondary);
    padding: 1rem 1.25rem;
    margin-bottom: 0.5rem;
    border-radius: 0.75rem;
    transition: all 0.3s ease;
    font-weight: 500;
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.nav-pills .nav-link:hover {
    background: var(--surface-tertiary);
    color: var(--text-primary);
    border-color: var(--border-default);
    transform: translateX(4px);
}

.nav-pills .nav-link.active {
    background: linear-gradient(135deg, var(--accent-primary), var(--accent-secondary));
    color: white;
    border-color: var(--accent-primary);
    box-shadow: 0 4px 12px rgba(35, 134, 54, 0.3);
}

.nav-pills .nav-link i {
    width: 20px;
    text-align: center;
    margin-right: 0.75rem;
}

.welcome-state {
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
    border-radius: 1rem;
    margin: 2rem 0;
}

.welcome-icon {
    opacity: 0.6;
}

.settings-form-card {
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: var(--shadow);
}

.settings-form-header {
    background: var(--surface-tertiary);
    border-bottom: 1px solid var(--border-default);
    padding: 1.5rem;
}

.settings-form-body {
    padding: 2rem;
}

.setting-item {
    background: var(--surface-primary);
    border: 1px solid var(--border-muted);
    border-radius: 0.75rem;
    padding: 1.5rem;
    margin-bottom: 1.5rem;
    transition: all 0.3s ease;
}

.setting-item:hover {
    border-color: var(--accent-primary);
    box-shadow: 0 2px 8px rgba(35, 134, 54, 0.1);
}

.setting-label {
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.setting-description {
    color: var(--text-secondary);
    font-size: 0.875rem;
    line-height: 1.5;
    margin-top: 0.5rem;
}

.btn-group .btn {
    border-radius: 0.5rem !important;
}

.btn-group .btn:not(:last-child) {
    margin-right: 0.25rem;
}

.form-control, .form-select {
    border-radius: 0.5rem;
    border: 2px solid var(--border-default);
    background: var(--surface-primary);
    color: var(--text-primary);
    padding: 0.75rem 1rem;
    transition: all 0.3s ease;
}

.form-control:focus, .form-select:focus {
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 0.2rem rgba(35, 134, 54, 0.1);
    background: var(--surface-secondary);
}

.form-check-input:checked {
    background-color: var(--accent-primary);
    border-color: var(--accent-primary);
}

.form-switch .form-check-input {
    background-color: var(--surface-tertiary);
    border: 2px solid var(--border-default);
}

.badge {
    font-weight: 500;
    font-size: 0.75rem;
    padding: 0.375rem 0.75rem;
    border-radius: 0.5rem;
}

.quick-actions {
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
    border-radius: 1rem;
    padding: 2rem;
    margin-top: 3rem;
}

.quick-action-btn {
    background: var(--surface-primary);
    border: 2px solid var(--border-default);
    color: var(--text-primary);
    padding: 1rem;
    border-radius: 0.75rem;
    transition: all 0.3s ease;
    text-decoration: none;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
}

.quick-action-btn:hover {
    border-color: var(--accent-primary);
    color: var(--accent-primary);
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(35, 134, 54, 0.2);
}

@media (max-width: 991.98px) {
    .sticky-top {
        position: static !important;
    }

    .settings-nav-card {
        margin-bottom: 2rem;
    }
}
</style>

<!-- JavaScript -->
<script>
// Global variables
let currentCategory = null;
let settingsData = {};

// Load settings on page load
document.addEventListener('DOMContentLoaded', function() {
    console.log('Settings page loaded, AdminUtils available:', typeof AdminUtils);
    console.log('Starting to load settings...');
    loadSettings();
});

// Add debugging to button clicks
console.log('Settings JavaScript loaded successfully');

// Test function to verify JavaScript is working
window.testButton = function() {
    console.log('Test button clicked!');
    AdminUtils.showNotification('JavaScript is working!', 'success');
};

// Load all settings
async function loadSettings() {
    try {
        const response = await fetch('/api/settings/categories');
        const data = await response.json();

        if (data.success) {
            settingsData = data.categories;
            renderSettingsNavigation();
        } else {
            AdminUtils.showNotification('Failed to load settings', 'danger');
        }
    } catch (error) {
        console.error('Error loading settings:', error);
        AdminUtils.showNotification('Error loading settings', 'danger');
    }
}

// Render settings navigation
function renderSettingsNavigation() {
    const nav = document.getElementById('settingsNav');
    nav.innerHTML = '';

    settingsData.forEach(category => {
        const categoryName = category.name;
        const categoryTitle = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);
        const settingsCount = category.settings.length;

        const categoryIcon = getCategoryIcon(categoryName);

        const navItem = document.createElement('a');
        navItem.href = '#';
        navItem.className = 'nav-link';
        navItem.onclick = (event) => loadCategory(categoryName, event.target);
        navItem.setAttribute('data-category', categoryName);

        navItem.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="${categoryIcon} me-2"></i>
                <span class="flex-grow-1">${categoryTitle}</span>
            </div>
        `;

        nav.appendChild(navItem);
    });
}

// Get icon for category
function getCategoryIcon(category) {
    const icons = {
        admin: 'fas fa-user-shield',
        application: 'fas fa-cog',
        database: 'fas fa-database',
        email: 'fas fa-envelope',
        license: 'fas fa-key',
        monitoring: 'fas fa-chart-line',
        payment: 'fas fa-credit-card',
        performance: 'fas fa-tachometer-alt',
        security: 'fas fa-shield-alt',
        storage: 'fas fa-folder-open'
    };
    return icons[category] || 'fas fa-cog';
}

// Load category settings
function loadCategory(categoryName, targetElement) {
    currentCategory = categoryName;

    // Update navigation
    document.querySelectorAll('#settingsNav .nav-link').forEach(item => {
        item.classList.remove('active');
    });

    // Only try to set active if we have a target element (from click event)
    if (targetElement) {
        const navLink = targetElement.closest('.nav-link');
        if (navLink) {
            navLink.classList.add('active');
        }
    } else {
        // Find and activate the correct navigation item when called programmatically
        const navItems = document.querySelectorAll('#settingsNav .nav-link');
        navItems.forEach(item => {
            const categoryAttr = item.getAttribute('data-category');
            if (categoryAttr === categoryName) {
                item.classList.add('active');
            }
        });
    }

    // Find category data
    const categoryData = settingsData.find(cat => cat.name === categoryName);
    if (!categoryData) return;

    renderCategorySettings(categoryData);
}

// Render category settings
function renderCategorySettings(categoryData) {
    const content = document.getElementById('settingsContent');
    const categoryTitle = categoryData.name.charAt(0).toUpperCase() + categoryData.name.slice(1);

    content.innerHTML = `
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="${getCategoryIcon(categoryData.name)} me-2"></i>
                    ${categoryTitle} Settings
                </h5>
                <div>
                    <button class="btn btn-outline-info btn-sm" onclick="testConfiguration('${categoryData.name}')">
                        <i class="fas fa-flask me-1"></i>Test
                    </button>
                    <button class="btn btn-outline-success btn-sm" onclick="saveCategory('${categoryData.name}')">
                        <i class="fas fa-save me-1"></i>Save
                    </button>
                </div>
            </div>
            <div class="card-body">
                <form id="categoryForm">
                    ${renderSettingsForm(categoryData.settings)}
                </form>
            </div>
        </div>
    `;
}

// Render settings form
function renderSettingsForm(settings) {
    return settings.map(setting => {
        const schema = setting.schema;
        const fieldId = setting.key.replace(/\./g, '_');

        return `
            <div class="mb-4">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <label for="${fieldId}" class="form-label mb-0">
                        <strong>${getSettingDisplayName(setting.key)}</strong>
                        ${schema.sensitive ? '<i class="fas fa-lock text-warning ms-1" title="Sensitive data"></i>' : ''}
                    </label>
                    ${!schema.web_editable ? '<span class="badge bg-secondary">Read-only</span>' : ''}
                </div>

                <div class="mb-2">
                    ${renderSettingInput(setting, fieldId)}
                </div>

                <div class="form-text">
                    ${schema.description}
                    ${schema.default !== undefined ? `<br><small class="text-muted">Default: ${schema.default}</small>` : ''}
                </div>
            </div>
        `;
    }).join('');
}

// Render setting input
function renderSettingInput(setting, fieldId) {
    const schema = setting.schema;
    const value = setting.value || '';
    const disabled = !schema.web_editable ? 'disabled' : '';

    switch (schema.type) {
        case 'boolean':
            return `
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="${fieldId}"
                           ${value ? 'checked' : ''} ${disabled}
                           data-key="${setting.key}">
                    <label class="form-check-label" for="${fieldId}">
                        ${value ? 'Enabled' : 'Disabled'}
                    </label>
                </div>
            `;

        case 'select':
            const options = schema.options.map(option =>
                `<option value="${option}" ${value === option ? 'selected' : ''}>${option}</option>`
            ).join('');
            return `
                <select class="form-select" id="${fieldId}" data-key="${setting.key}" ${disabled}>
                    ${options}
                </select>
            `;

        case 'password':
            return `
                <div class="input-group">
                    <input type="password" class="form-control" id="${fieldId}"
                           value="${schema.sensitive ? (value ? '••••••••' : '') : value}"
                           data-key="${setting.key}" ${disabled}
                           placeholder="${schema.sensitive && value ? 'Enter new value to change' : ''}">
                    <button class="btn btn-outline-secondary" type="button" onclick="togglePassword('${fieldId}')">
                        <i class="fas fa-eye"></i>
                    </button>
                </div>
            `;

        case 'text':
            return `
                <textarea class="form-control" id="${fieldId}" rows="3"
                          data-key="${setting.key}" ${disabled}>${value}</textarea>
            `;

        case 'number':
            return `
                <input type="number" class="form-control" id="${fieldId}"
                       value="${value}" data-key="${setting.key}" ${disabled}>
            `;

        default:
            return `
                <input type="text" class="form-control" id="${fieldId}"
                       value="${value}" data-key="${setting.key}" ${disabled}>
            `;
    }
}

// Get display name for setting
function getSettingDisplayName(key) {
    const parts = key.split('.');
    return parts[parts.length - 1]
        .split('_')
        .map(word => word.charAt(0).toUpperCase() + word.slice(1))
        .join(' ');
}

// Toggle password visibility
function togglePassword(fieldId) {
    const field = document.getElementById(fieldId);
    const button = field.nextElementSibling;
    const icon = button.querySelector('i');

    if (field.type === 'password') {
        field.type = 'text';
        icon.className = 'fas fa-eye-slash';
    } else {
        field.type = 'password';
        icon.className = 'fas fa-eye';
    }
}

// Save category settings
async function saveCategory(categoryName) {
    const form = document.getElementById('categoryForm');
    const formData = new FormData(form);
    const settings = [];

    // Collect all settings from form
    form.querySelectorAll('[data-key]').forEach(input => {
        const key = input.dataset.key;
        let value;

        if (input.type === 'checkbox') {
            value = input.checked;
        } else if (input.value && input.value !== '••••••••') {
            value = input.value;
        } else if (input.value === '••••••••') {
            // Skip unchanged password fields
            return;
        } else {
            value = input.value || '';
        }

        settings.push({ key, value });
    });

    try {
        const response = await fetch('/api/settings/bulk-update', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ settings })
        });

        const data = await response.json();

        if (data.success) {
            AdminUtils.showNotification(data.message, 'success');
            loadSettings(); // Reload to reflect changes
        } else {
            AdminUtils.showNotification(data.errors ? data.errors.join(', ') : 'Failed to save settings', 'danger');
        }
    } catch (error) {
        console.error('Error saving settings:', error);
        AdminUtils.showNotification('Error saving settings', 'danger');
    }
}

// Test configuration
async function testConfiguration(categoryName) {
    try {
        const response = await fetch(`/api/settings/${categoryName}/test`, {
            method: 'POST'
        });

        const data = await response.json();

        if (data.success) {
            showTestResults(data.test_results);
        } else {
            AdminUtils.showNotification('Failed to test configuration', 'danger');
        }
    } catch (error) {
        console.error('Error testing configuration:', error);
        AdminUtils.showNotification('Error testing configuration', 'danger');
    }
}

// Show test results
function showTestResults(results) {
    const content = document.getElementById('testResultsContent');

    let html = '';
    Object.entries(results).forEach(([category, result]) => {
        const statusIcon = result.status === 'ok' ? 'fas fa-check-circle text-success' :
                          result.status === 'warning' ? 'fas fa-exclamation-triangle text-warning' :
                          result.status === 'error' ? 'fas fa-times-circle text-danger' :
                          'fas fa-info-circle text-info';

        html += `
            <div class="d-flex align-items-center mb-3">
                <i class="${statusIcon} me-3"></i>
                <div>
                    <strong>${category.charAt(0).toUpperCase() + category.slice(1)}</strong>
                    <div class="text-muted">${result.message}</div>
                </div>
            </div>
        `;
    });

    content.innerHTML = html;

    const modal = new bootstrap.Modal(document.getElementById('testResultsModal'));
    modal.show();
}

// Export settings
async function exportSettings() {
    try {
        const response = await fetch('/api/settings/export');
        const blob = await response.blob();

        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = 'settings.yml';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        AdminUtils.showNotification('Settings exported successfully', 'success');
    } catch (error) {
        console.error('Error exporting settings:', error);
        AdminUtils.showNotification('Error exporting settings', 'danger');
    }
}

// Show import modal
function showImportModal() {
    const modal = new bootstrap.Modal(document.getElementById('importModal'));
    modal.show();
}

// Import settings
async function importSettings() {
    const fileInput = document.getElementById('importFile');
    const file = fileInput.files[0];

    if (!file) {
        AdminUtils.showNotification('Please select a file', 'warning');
        return;
    }

    const formData = new FormData();
    formData.append('file', file);

    try {
        const response = await fetch('/api/settings/import', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            AdminUtils.showNotification(data.message, 'success');
            bootstrap.Modal.getInstance(document.getElementById('importModal')).hide();
            loadSettings(); // Reload settings
        } else {
            AdminUtils.showNotification(data.error, 'danger');
        }
    } catch (error) {
        console.error('Error importing settings:', error);
        AdminUtils.showNotification('Error importing settings', 'danger');
    }
}

// Generate .env file
async function generateEnvFile() {
    try {
        const response = await fetch('/api/settings/generate-env');
        const blob = await response.blob();

        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.style.display = 'none';
        a.href = url;
        a.download = '.env';
        document.body.appendChild(a);
        a.click();
        window.URL.revokeObjectURL(url);
        document.body.removeChild(a);

        AdminUtils.showNotification('.env file generated successfully', 'success');
    } catch (error) {
        console.error('Error generating .env file:', error);
        AdminUtils.showNotification('Error generating .env file', 'danger');
    }
}

// Legacy functions for existing modals
function showPaymentSettings() {
    loadCategory('payment');
}

function showEmailSettings() {
    loadCategory('email');
}

async function backupDatabase() {
    if (!AdminUtils.confirmAction('Create a database backup? This may take a few moments.')) {
        return;
    }

    try {
        AdminUtils.showNotification('Database backup started...', 'info');

        const response = await fetch('/admin/database/backup', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.success) {
            AdminUtils.showNotification(data.message, 'success');
        } else {
            AdminUtils.showNotification(data.error || 'Backup failed', 'danger');
        }
    } catch (error) {
        AdminUtils.showNotification('Error creating backup: ' + error.message, 'danger');
    }
}

async function runMigrations() {
    if (!AdminUtils.confirmAction('Run database migrations? This will update your database schema.')) {
        return;
    }

    try {
        AdminUtils.showNotification('Running migrations...', 'info');

        const response = await fetch('/admin/database/migrate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.success) {
            AdminUtils.showNotification(data.message, 'success');
        } else {
            AdminUtils.showNotification(data.error || 'Migration failed', 'danger');
        }
    } catch (error) {
        AdminUtils.showNotification('Error running migrations: ' + error.message, 'danger');
    }
}

function changeAdminPassword() {
    loadCategory('security');
}

async function regenerateApiKeys() {
    if (!AdminUtils.confirmAction('Regenerate API keys? This will invalidate existing tokens.')) {
        return;
    }

    try {
        const response = await fetch('/admin/security/regenerate-keys', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.success) {
            AdminUtils.showNotification(data.message, 'success');
        } else {
            AdminUtils.showNotification(data.error || 'Failed to regenerate keys', 'danger');
        }
    } catch (error) {
        AdminUtils.showNotification('Error regenerating keys: ' + error.message, 'danger');
    }
}

function showSystemInfo() {
    loadCategory('application');
}

async function downloadLogs() {
    try {
        AdminUtils.showNotification('Preparing log files for download...', 'info');

        const response = await fetch('/admin/logs/download');

        if (response.ok) {
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `application_logs_${new Date().toISOString().split('T')[0]}.log`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            AdminUtils.showNotification('Log files downloaded!', 'success');
        } else {
            AdminUtils.showNotification('Log files not found', 'warning');
        }
    } catch (error) {
        AdminUtils.showNotification('Error downloading logs: ' + error.message, 'danger');
    }
}

async function exportData() {
    if (!AdminUtils.confirmAction('Export all system data? This will create a comprehensive backup.')) {
        return;
    }

    try {
        AdminUtils.showNotification('Preparing data export...', 'info');

        const response = await fetch('/admin/data/export', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            }
        });

        const data = await response.json();

        if (data.success) {
            AdminUtils.showNotification(data.message, 'success');
        } else {
            AdminUtils.showNotification(data.error || 'Export failed', 'danger');
        }
    } catch (error) {
        AdminUtils.showNotification('Error exporting data: ' + error.message, 'danger');
    }
}
</script>
