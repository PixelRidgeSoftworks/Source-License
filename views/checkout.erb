<!-- Checkout Page -->
<div class="container py-5">
    <div class="row">
        <div class="col-lg-8">
            <!-- Checkout Header -->
            <div class="d-flex align-items-center mb-4">
                <a href="/cart" class="btn btn-outline-secondary me-3">
                    <i class="fas fa-arrow-left"></i>
                </a>
                <h2 class="fw-bold mb-0">
                    <i class="fas fa-credit-card me-2"></i>
                    <%= custom_text('checkout_title', 'Checkout') %>
                </h2>
            </div>

            <!-- Checkout Steps -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="checkout-steps">
                        <div class="d-flex align-items-center">
                            <div class="step active">
                                <span class="step-number">1</span>
                                <span class="step-label"><%= custom_text('checkout_step_information', 'Information') %></span>
                            </div>
                            <div class="step-divider"></div>
                            <div class="step">
                                <span class="step-number">2</span>
                                <span class="step-label"><%= custom_text('checkout_step_payment', 'Payment') %></span>
                            </div>
                            <div class="step-divider"></div>
                            <div class="step">
                                <span class="step-number">3</span>
                                <span class="step-label"><%= custom_text('checkout_step_complete', 'Complete') %></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Customer Information Form -->
            <div class="card mb-4" id="customer-info-section">
                <div class="card-header">
                    <h5 class="fw-bold mb-0">
                        <i class="fas fa-user me-2"></i>
                        <%= custom_text('checkout_customer_info', 'Customer Information') %>
                    </h5>
                </div>
                <div class="card-body">
                    <form id="customer-form">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="customer-name" class="form-label">Full Name *</label>
                                <input type="text" class="form-control" id="customer-name" required autocomplete="name">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="customer-email" class="form-label">Email Address *</label>
                                <input type="email" class="form-control" id="customer-email" required autocomplete="email">
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="company-name" class="form-label">Company Name</label>
                                <input type="text" class="form-control" id="company-name" autocomplete="organization">
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="phone-number" class="form-label">Phone Number</label>
                                <input type="tel" class="form-control" id="phone-number" autocomplete="tel">
                            </div>
                        </div>
                        <div class="mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="newsletter-signup">
                                <label class="form-check-label" for="newsletter-signup">
                                    Subscribe to newsletter for product updates
                                </label>
                            </div>
                        </div>
                        <div class="d-flex justify-content-end">
                            <button type="button" class="btn btn-primary" id="continue-btn" onclick="proceedToNext()">
                                <span id="continue-text">Continue to Payment</span>
                                <i class="fas fa-arrow-right ms-2"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Payment Method Selection -->
            <div class="card mb-4" id="payment-method-section" style="display: none;">
                <div class="card-header">
                    <h5 class="fw-bold mb-0">
                        <i class="fas fa-credit-card me-2"></i>
                        Payment Method
                    </h5>
                </div>
                <div class="card-body">
                    <div class="payment-methods mb-4">
                        <% if stripe_enabled? %>
                        <div class="payment-method-option">
                            <input type="radio" class="form-check-input" name="payment-method" id="stripe-payment" value="stripe" checked>
                            <label class="form-check-label w-100" for="stripe-payment">
                                <div class="payment-method-card">
                                    <div class="d-flex align-items-center">
                                        <i class="fab fa-stripe text-primary me-3" style="font-size: 2rem;"></i>
                                        <div>
                                            <div class="fw-bold">Credit/Debit Card</div>
                                            <small class="text-muted">Visa, Mastercard, American Express</small>
                                        </div>
                                        <div class="ms-auto">
                                            <i class="fas fa-shield-alt text-success"></i>
                                        </div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <% end %>

                        <% if paypal_enabled? %>
                        <div class="payment-method-option">
                            <input type="radio" class="form-check-input" name="payment-method" id="paypal-payment" value="paypal">
                            <label class="form-check-label w-100" for="paypal-payment">
                                <div class="payment-method-card">
                                    <div class="d-flex align-items-center">
                                        <i class="fab fa-paypal text-info me-3" style="font-size: 2rem;"></i>
                                        <div>
                                            <div class="fw-bold">PayPal</div>
                                            <small class="text-muted">Pay with your PayPal account</small>
                                        </div>
                                        <div class="ms-auto">
                                            <i class="fas fa-shield-alt text-success"></i>
                                        </div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <% end %>
                    </div>

                    <!-- Stripe Card Element -->
                    <div id="stripe-card-section" class="payment-form-section">
                        <div class="mb-3">
                            <label class="form-label">Card Information</label>
                            <div id="card-element" class="form-control" style="padding: 12px;">
                                <!-- Stripe Elements will create form elements here -->
                            </div>
                            <div id="card-errors" class="text-danger mt-2"></div>
                        </div>
                    </div>

                    <!-- PayPal Section -->
                    <div id="paypal-section" class="payment-form-section" style="display: none;">
                        <div id="paypal-button-container"></div>
                    </div>

                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-outline-secondary" onclick="backToCustomerInfo()">
                            <i class="fas fa-arrow-left me-2"></i>
                            Back
                        </button>
                        <button type="button" class="btn btn-primary" id="complete-payment-btn" onclick="completePayment()">
                            <i class="fas fa-lock me-2"></i>
                            Complete Payment
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Order Summary Sidebar -->
        <div class="col-lg-4">
            <div class="card sticky-top" style="top: 100px;">
                <div class="card-header">
                    <h5 class="fw-bold mb-0">
                        <i class="fas fa-receipt me-2"></i>
                        Order Summary
                    </h5>
                </div>
                <div class="card-body">
                    <div id="checkout-order-summary">
                        <!-- Order summary will be populated via JavaScript -->
                    </div>

                    <!-- Security Information -->
                    <hr>
                    <div class="security-info">
                        <h6 class="fw-bold mb-3">
                            <i class="fas fa-shield-alt text-success me-2"></i>
                            Secure Checkout
                        </h6>
                        <div class="small text-muted">
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-lock text-success me-2"></i>
                                <span>SSL encrypted payment</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <i class="fas fa-certificate text-success me-2"></i>
                                <span>PCI DSS compliant</span>
                            </div>
                            <div class="d-flex align-items-center">
                                <i class="fas fa-clock text-success me-2"></i>
                                <span>Instant license delivery</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
/* Checkout Steps Styling */
.checkout-steps {
    padding: 1rem 0;
}

.checkout-steps .d-flex {
    max-width: 400px;
    margin: 0 auto;
}

.step {
    display: flex;
    flex-direction: column;
    align-items: center;
    flex: 1;
    opacity: 0.5;
    transition: opacity 0.3s ease;
}

.step.active {
    opacity: 1;
}

.step-number {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--surface-tertiary);
    border: 2px solid var(--border-default);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    margin-bottom: 0.5rem;
    transition: all 0.3s ease;
}

.step.active .step-number {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: white;
}

.step-label {
    font-size: 0.875rem;
    font-weight: 500;
    text-align: center;
}

.step-divider {
    height: 2px;
    background: var(--border-default);
    flex: 1;
    margin: 0 1rem;
    margin-top: 20px;
    transition: background-color 0.3s ease;
}

/* Payment Method Styling */
.payment-method-option {
    margin-bottom: 1rem;
}

.payment-method-card {
    border: 2px solid var(--border-default);
    border-radius: 8px;
    padding: 1rem;
    transition: all 0.3s ease;
    cursor: pointer;
}

.payment-method-option input[type="radio"]:checked + label .payment-method-card {
    border-color: var(--accent-primary);
    background: rgba(35, 134, 54, 0.1);
}

.payment-method-card:hover {
    border-color: var(--accent-primary);
}

.payment-form-section {
    margin-top: 1rem;
    padding: 1rem;
    border: 1px solid var(--border-default);
    border-radius: 8px;
    background: var(--surface-tertiary);
}

/* Stripe Elements Styling */
#card-element {
    background: var(--surface-secondary);
    border: 1px solid var(--border-default);
    min-height: 50px;
}

.StripeElement {
    background-color: transparent;
    padding: 10px 12px;
    border: none;
}

.StripeElement--focus {
    border-color: var(--accent-primary);
    box-shadow: 0 0 0 0.2rem rgba(35, 134, 54, 0.25);
}

.StripeElement--invalid {
    border-color: var(--bs-danger);
}

/* Loading state */
.btn-loading {
    position: relative;
    color: transparent !important;
}

.btn-loading::after {
    content: '';
    position: absolute;
    width: 20px;
    height: 20px;
    top: 50%;
    left: 50%;
    margin-left: -10px;
    margin-top: -10px;
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
    to { transform: rotate(360deg); }
}
</style>

<script>
// Checkout functionality
class CheckoutManager {
    constructor() {
        this.cartItems = JSON.parse(sessionStorage.getItem('checkout_cart') || '[]');
        this.products = {};
        this.stripe = null;
        this.cardElement = null;
        this.currentStep = 1;

        this.loadProducts();
        this.initializePaymentMethods();
        this.renderOrderSummary();

        // Setup payment method change handlers
        document.querySelectorAll('input[name="payment-method"]').forEach(radio => {
            radio.addEventListener('change', () => this.handlePaymentMethodChange());
        });
    }

    async loadProducts() {
        try {
            const response = await fetch('/api/products');
            if (response.ok) {
                const data = await response.json();
                this.products = data.reduce((acc, product) => {
                    acc[product.id] = product;
                    return acc;
                }, {});
                this.renderOrderSummary();
            }
        } catch (error) {
            console.error('Failed to load products:', error);
        }
    }

    initializePaymentMethods() {
        <% if stripe_enabled? %>
        // Initialize Stripe
        this.stripe = Stripe('<%= ENV['STRIPE_PUBLISHABLE_KEY'] %>');
        const elements = this.stripe.elements({
            appearance: {
                theme: 'night',
                variables: {
                    colorPrimary: '#238636',
                    colorBackground: '#21262d',
                    colorText: '#e6edf3',
                    colorDanger: '#da3633',
                    borderRadius: '8px'
                }
            }
        });

        this.cardElement = elements.create('card');
        this.cardElement.mount('#card-element');

        this.cardElement.on('change', (event) => {
            const displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });
        <% end %>

        <% if paypal_enabled? %>
        // Initialize PayPal (will be loaded when PayPal method is selected)
        <% end %>
    }

    handlePaymentMethodChange() {
        const selectedMethod = document.querySelector('input[name="payment-method"]:checked').value;

        // Hide all payment sections
        document.querySelectorAll('.payment-form-section').forEach(section => {
            section.style.display = 'none';
        });

        // Show selected payment section
        if (selectedMethod === 'stripe') {
            document.getElementById('stripe-card-section').style.display = 'block';
        } else if (selectedMethod === 'paypal') {
            document.getElementById('paypal-section').style.display = 'block';
            this.initializePayPal();
        }
    }

    <% if paypal_enabled? %>
    initializePayPal() {
        // Clear existing PayPal buttons
        document.getElementById('paypal-button-container').innerHTML = '';

        paypal.Buttons({
            createOrder: (data, actions) => {
                return this.createPayPalOrder();
            },
            onApprove: (data, actions) => {
                return this.handlePayPalApproval(data.orderID);
            },
            onError: (err) => {
                console.error('PayPal error:', err);
                this.showNotification('PayPal payment failed. Please try again.', 'danger');
            }
        }).render('#paypal-button-container');
    }
    <% end %>

    renderOrderSummary() {
        const container = document.getElementById('checkout-order-summary');

        if (this.cartItems.length === 0) {
            container.innerHTML = '<p class="text-muted">No items to checkout</p>';
            return;
        }

        let subtotal = 0;
        let setupFees = 0;
        const itemsHtml = this.cartItems.map(item => {
            const product = this.products[item.productId];
            if (!product) return '';

            const itemTotal = parseFloat(product.price) * item.quantity;
            const itemSetupFee = parseFloat(product.setup_fee || 0) * item.quantity;

            subtotal += itemTotal;
            setupFees += itemSetupFee;

            return `
                <div class="d-flex justify-content-between align-items-start mb-3">
                    <div class="flex-grow-1">
                        <div class="fw-bold">${product.name}</div>
                        <small class="text-muted">Qty: ${item.quantity}</small>
                        ${product.license_type === 'subscription' ? '<small class="d-block text-info">Monthly billing</small>' : ''}
                    </div>
                    <div class="text-end">
                        <div>${window.SourceLicense.formatCurrency(itemTotal)}</div>
                        ${itemSetupFee > 0 ? `<small class="text-muted">+ ${window.SourceLicense.formatCurrency(itemSetupFee)} setup</small>` : ''}
                    </div>
                </div>
            `;
        }).join('');

        const total = subtotal + setupFees;

        container.innerHTML = `
            ${itemsHtml}
            <hr>
            <div class="d-flex justify-content-between mb-2">
                <span>Subtotal:</span>
                <span>${window.SourceLicense.formatCurrency(subtotal)}</span>
            </div>
            ${setupFees > 0 ? `
                <div class="d-flex justify-content-between mb-2">
                    <span>Setup Fees:</span>
                    <span>${window.SourceLicense.formatCurrency(setupFees)}</span>
                </div>
            ` : ''}
            <hr>
            <div class="d-flex justify-content-between fw-bold h5">
                <span>Total:</span>
                <span class="text-success">${window.SourceLicense.formatCurrency(total)}</span>
            </div>
        `;

        // Update button text based on total
        this.updateContinueButton(total);
    }

    updateContinueButton(total) {
        const continueText = document.getElementById('continue-text');
        const continueBtn = document.getElementById('continue-btn');

        if (total === 0) {
            continueText.textContent = 'Complete Free Order';
            continueBtn.className = continueBtn.className.replace('btn-primary', 'btn-success');
        } else {
            continueText.textContent = 'Continue to Payment';
            continueBtn.className = continueBtn.className.replace('btn-success', 'btn-primary');
        }
    }

    calculateTotal() {
        let total = 0;
        this.cartItems.forEach(item => {
            const product = this.products[item.productId];
            if (product) {
                total += (parseFloat(product.price) + parseFloat(product.setup_fee || 0)) * item.quantity;
            }
        });
        return total;
    }

    showNotification(message, type = 'info') {
        const notification = document.createElement('div');
        notification.className = `alert alert-${type} flash-message position-fixed`;
        notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; max-width: 300px;';
        notification.textContent = message;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.transition = 'opacity 0.5s ease';
            notification.style.opacity = '0';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    async createOrder() {
        const customerData = {
            name: document.getElementById('customer-name').value,
            email: document.getElementById('customer-email').value,
            company: document.getElementById('company-name').value,
            phone: document.getElementById('phone-number').value
        };

        // Get selected payment method
        const selectedPaymentMethod = document.querySelector('input[name="payment-method"]:checked')?.value || 'stripe';

        const orderData = {
            customer: customerData,
            items: this.cartItems,
            amount: this.calculateTotal(),
            currency: 'USD',
            payment_method: selectedPaymentMethod
        };

        try {
            const response = await fetch('/api/orders', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            });

            if (response.ok) {
                return await response.json();
            } else {
                throw new Error('Failed to create order');
            }
        } catch (error) {
            console.error('Error creating order:', error);
            throw error;
        }
    }

    async createPayPalOrder() {
        try {
            const order = await this.createOrder();
            return order.paypal_order_id;
        } catch (error) {
            console.error('Failed to create PayPal order:', error);
            this.showNotification('Failed to create order. Please try again.', 'danger');
        }
    }

    async handlePayPalApproval(orderID) {
        try {
            const response = await fetch('/api/payment/paypal/capture', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ order_id: orderID })
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    this.handlePaymentSuccess(result);
                }
            }
        } catch (error) {
            console.error('PayPal capture error:', error);
            this.showNotification('Payment processing failed. Please try again.', 'danger');
        }
    }

    handlePaymentSuccess(result) {
        // Clear cart
        localStorage.removeItem('cart');
        sessionStorage.removeItem('checkout_cart');

        // Redirect to success page
        window.location.href = `/success?order_id=${result.order_id}`;
    }
}

// Initialize checkout
let checkout;
document.addEventListener('DOMContentLoaded', function() {
    checkout = new CheckoutManager();
});

// Step navigation functions
function proceedToNext() {
    const form = document.getElementById('customer-form');
    if (!form.checkValidity()) {
        form.reportValidity();
        return;
    }

    // Check if order total is free
    const total = checkout.calculateTotal();

    if (total === 0) {
        // Free order - skip payment and complete directly
        completeFreeOrder();
    } else {
        // Paid order - proceed to payment
        proceedToPayment();
    }
}

function proceedToPayment() {
    // Hide customer info, show payment
    document.getElementById('customer-info-section').style.display = 'none';
    document.getElementById('payment-method-section').style.display = 'block';

    // Update step indicator
    document.querySelectorAll('.step')[1].classList.add('active');

    // Show default payment method
    checkout.handlePaymentMethodChange();
}

async function completeFreeOrder() {
    const continueBtn = document.getElementById('continue-btn');
    continueBtn.classList.add('btn-loading');
    continueBtn.disabled = true;

    try {
        // Create the order for free products
        const customerData = {
            name: document.getElementById('customer-name').value,
            email: document.getElementById('customer-email').value,
            company: document.getElementById('company-name').value,
            phone: document.getElementById('phone-number').value
        };

        const orderData = {
            customer: customerData,
            items: checkout.cartItems,
            amount: 0,
            currency: 'USD',
            payment_method: 'free'
        };

        const response = await fetch('/api/orders/free', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(orderData)
        });

        if (response.ok) {
            const result = await response.json();
            checkout.handlePaymentSuccess(result);
        } else {
            throw new Error('Failed to process free order');
        }

    } catch (error) {
        console.error('Free order error:', error);
        checkout.showNotification('Failed to process order. Please try again.', 'danger');
    } finally {
        continueBtn.classList.remove('btn-loading');
        continueBtn.disabled = false;
    }
}

function backToCustomerInfo() {
    document.getElementById('payment-method-section').style.display = 'none';
    document.getElementById('customer-info-section').style.display = 'block';

    // Update step indicator
    document.querySelectorAll('.step')[1].classList.remove('active');
}

async function completePayment() {
    const selectedMethod = document.querySelector('input[name="payment-method"]:checked').value;
    const paymentBtn = document.getElementById('complete-payment-btn');

    paymentBtn.classList.add('btn-loading');
    paymentBtn.disabled = true;

    try {
        if (selectedMethod === 'stripe') {
            await processStripePayment();
        }
        // PayPal is handled by its own button
    } catch (error) {
        console.error('Payment error:', error);
        checkout.showNotification('Payment failed. Please try again.', 'danger');
    } finally {
        paymentBtn.classList.remove('btn-loading');
        paymentBtn.disabled = false;
    }
}

<% if stripe_enabled? %>
async function processStripePayment() {
    try {
        // Create order first
        const order = await checkout.createOrder();

        // Confirm payment with Stripe
        const {error, paymentIntent} = await checkout.stripe.confirmCardPayment(
            order.client_secret,
            {
                payment_method: {
                    card: checkout.cardElement,
                    billing_details: {
                        name: document.getElementById('customer-name').value,
                        email: document.getElementById('customer-email').value,
                    }
                }
            }
        );

        if (error) {
            throw new Error(error.message);
        } else if (paymentIntent.status === 'succeeded') {
            checkout.handlePaymentSuccess({
                order_id: order.order_id,
                payment_intent_id: paymentIntent.id
            });
        }
    } catch (error) {
        throw error;
    }
}
<% end %>

// Setup products data from server-side
window.checkoutProductsData = <%= @products ? @products.map(&:values).to_json : '[]' %>;

// Override fetch for API endpoints
const originalFetch = window.fetch;
window.fetch = function(url, options) {
    if (url === '/api/products') {
        return Promise.resolve({
            ok: true,
            json: () => Promise.resolve(window.checkoutProductsData)
        });
    }
    // Let all other API calls (orders, etc.) go through to the real backend
    return originalFetch.apply(this, arguments);
};
</script>
